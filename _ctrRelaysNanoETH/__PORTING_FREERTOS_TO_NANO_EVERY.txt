La biblioteca FreeRTOS que se puede instalar con Arduino IDE no es compatible con Arduino Nano Every.

En este artículo, presentaremos cómo instalar FreeRTOS en Arduino Nano Every.

Como ejemplo específico, nuestro objetivo es ejecutar el boceto de muestra de FreeRTOS "Blink_AnalogRead.ino" en Arduino Nano Every.

Versión de FreeRTOS:

 - FreeRTOS 202210.01 LTS
	https://www.freertos.org/a00104.html
 

La estrategia es portar el código que depende del microcontrolador de FreeRTOS a la biblioteca FreeRTOS instalada con el IDE de Arduino,
para que se pueda cambiar con un conmutador de compilación.

Realice los siguientes seis pasos en orden.

1 - Instalar Arduino_FreeRTOS
*****************************
Instalar FreeRTOS@10.5.1-1 (instalado desde Arduino IDE)

2 - Agregar archivos para AVR_Mega0
***********************************
2.1 - Descargar FreeRTOS 202210.01 LTS
	https://www.freertos.org/a00104.html
2.2 - De la ruta:
	...\Downloads\FreeRTOSv202406.01-LTS\FreeRTOS-LTS\FreeRTOS\FreeRTOS-Kernel\portable\ThirdParty\Partner-Supported-Ports\GCC
	Copiar la carpeta "AVR_Mega0" 
	en 
	...\Documents\Arduino\libraries\FreeRTOS\src

	La carpeta "AVR_Mega0", tiene 3 archivos: "port.c", "porthardware.h" y "portmacro.h"

3 - Cambios en archivos de la librería FreeRTOS instaldo desde Arduino IDE.
***************************************************************************
	Renombrar "port.c" como "port.c_no_usar"
	
	En "portmacro.h" agregar al principio			
		#ifdef ARDUINO_AVR_NANO_EVERY
		#incluir "AVR_Mega0/portmacro.h"
		#else

		agregar al final #endif
	
	En "AVR_Mega0/port.c" agregar al principio
		#ifdef ARDUINO_AVR_NANO_EVERY al principio del archivo
		agregar al final #endif
		
		Modificar #include "FreeRTOS.h" por #include "Arduino_FreeRTOS.h"

	La estructura "TCB_t" parece usarse en el entorno de compilación Arduino Nano Every y no se puede usar.
	En el "task.c", el nombre se cambiar "TCB_t" por "RTOS_TCB_t".

4 - Eliminar variante.
	Valiant parece usarse en Arduino Nano en todos los entornos de compilación y no se puede usar.
	Realice un cambio de compilación con ARDUINO_AVR_NANO_EVERY y coméntelo.
	
	En "FreeRTOSVariant.h"
		#ifndef ARDUINO_AVR_NANO_EVERY al principio del archivo
		agregar al final #endif

	En "variantHooks.cpp"
		#ifndef ARDUINO_AVR_NANO_EVERY al principio del archivo
		agregar al final #endif
	
	Es necesario la inclusión de los archivos de encabezado "task.h" y "queue.h", y llamar a "vTaskStartScheduler()" en la función setup().
	
5 - Cambiar el nombre de los timers.h
*************************************
	En ...\Documents\Arduino\libraries\FreeRTOS\src
	
	Renombrar "timers.h" a "RTOS_timers.h".
	
	Cambiar la referencia en:
	
	event_groups.c:
		40: #include "timers.h"

	event_groups.h:
		37: #include "timers.h"

	tasks.c:
		41: #include "timers.h"

	timers.c:
		40: #include "timers.h"

	variantHooks.cpp:
		38: #include "timers.h"

6 - Modificar FreeRTOSConfig.h
******************************

	Agregar el siguiente código antes de #endif al final de "FreeRTOSConfig.h".
	
#ifdef ARDUINO_AVR_NANO_EVERY
    #define configUSE_TIMER_INSTANCE 4
    #define configTICK_RATE_HZ  ((TickType_t)1000)

    #undef configCHECK_FOR_STACK_OVERFLOW
    #undef configUSE_IDLE_HOOK
    #undef configUSE_MALLOC_FAILED_HOOK
    #undef configUSE_PORT_DELAY

    #define configCHECK_FOR_STACK_OVERFLOW 0
    #define configUSE_IDLE_HOOK 0
    #define configUSE_MALLOC_FAILED_HOOK 0
    #define configUSE_PORT_DELAY 0
#endif

7 - Cambios en Blink_AnalogRead.ino
************************************

	Agregar #include <tarea.h>
	Agregar "vTaskStartScheduler();" al final de la función setup().
